const path = require('path');
const HTMLWebpackPlugin = require('html-webpack-plugin');
const CopyWebpackPlugin = require('copy-webpack-plugin');

module.exports = {
    entry: {
        {{#each entries}}
        {{ this }}: path.resolve(__dirname, 'src/{{ ../scripting }}/{{ this }}.{{ ../scripting }}'),
        {{/each}}
    },
    output: {
        filename: '[name].js',
        path: path.resolve(__dirname, 'dist')
    },
    module: {
        rules: [
            {{#if_eq scripting 'ts'}}
            { test: /\.ts$/, use: 'ts-loader' },
            {{/if_eq}}
            {{#if_eq templating 'pug'}}
            { test: /\.pug$/, use: 'pug-html-loader' },
            {{/if_eq}}
            {
                {{#if_eq styling 'scss'}}
                test: /\.(css|scss|sass)$/,
                {{else}}
                test: /\.css$/,
                {{/if_eq}}
                use: [
                    {{#if styling}}
                    { loader: 'style-loader' },
                    { loader: 'css-loader' },
                    {{/if}}
                    {{#if purgeCss}}
                    {
                        loader: '@fullhuman/purgecss-loader',
                        options: {
                            content: [
                                path.join(__dirname, 'src/**/*.{{ templating }}'),
                                path.join(__dirname, 'src/{{ scripting }}/**/*.{{ scripting }}')
                            ]
                        }
                    },
                    {{/if}}
                    {{#if_eq styling 'scss'}}
                    { loader: 'sass-loader' }
                    {{/if_eq}}
                ]
            }
        ]
    },
    plugins: [
        new HTMLWebpackPlugin({ 
            filename: 'index.html',
            template: './src/index.{{ templating }}' ,
            inject: false
        }),
        new CopyWebpackPlugin([
            {
                from: 'src/assets',
                to: 'assets'
            }
        ])
    ],
    devServer: {
        contentBase: path.resolve(__dirname, 'src'),
        watchContentBase: true,
        port: 4100
    }
}